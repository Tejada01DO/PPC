@page "/R_Productos"
@page "/R_Productos/{EntradaId:int}"
@inject HttpClient httpClient
@inject IJSRuntime js
@inject NotificationService notify

<EditForm Model="entradas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <fieldset>
        <div class="container">
            <div class="card shadow-lg">
                <div class="card-header">
                    <h1>Registro de Productos</h1>
                </div>

                <div class="card-body">
                    <div class="col-md-6">
                        <label>ID</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="entradas.EntradaId" class="form-control"></InputNumber>
                            <button type="button" class="btn btn-outline-primary oi oi-magnifying-glass"
                            @onclick="Buscar"></button>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label>Fecha</label>
                        <InputDate @bind-Value="entradas.Fecha" class="form-control"></InputDate>
                        <ValidationMessage For="@(() => entradas.Fecha)" />
                    </div>

                    <label>Concepto</label>
                    <InputText @bind-Value="entradas.Concepto" class="form-control"></InputText>
                    <ValidationMessage For="@(() => entradas.Concepto)" />

                    <hr>
                    <fieldset>
                        <legend>Utilizados</legend>
                        <div class="row">
                            <div class="col-md-6">
                                <label>Producto: </label>
                                <InputSelect @bind-Value="entradasDetalle.ProductoId" class="form-select">
                                    <option value="@entradas.ProductoId" hidden="hidden">Seleccione un producto</option>
                                    @foreach (var item in L_Productos)
                                    {
                                        <option value="@item.ProductoId">@item.Descripcion</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => entradasDetalle.ProductoId)" />
                            </div>

                            <div class="col-md-5">
                                <label>Cantidad</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="entradasDetalle.CantidadUtilizada" class="form-control"></InputNumber>
                                    <button type="button" class="btn btn-dark" @onclick="AgregarDetalle">Agregar <i class="oi oi-plus" /></button>
                                    <ValidationMessage For="@(() => entradasDetalle.CantidadUtilizada)" />
                                </div>
                            </div>
                        </div>

                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Producto ID</th>
                                    <th>Descripcion</th>
                                    <th>Cantidad</th>
                                    <th>Precio</th>
                                    <th>Importe</th>
                                    <th></th>
                                </tr>
                            </thead>

                            <tbody>

                                @foreach (var item in this.entradas.entradasDetalle)
                                {
                                    <tr>
                                        <td>@item.ProductoId</td>
                                        <td>@ObtenerDescripcion(item.ProductoId)</td>
                                        <td>@item.CantidadUtilizada</td>
                                        <td>@item.Precio</td>
                                        <td>@item.Importe</td>
                                        <td><button type="button" class="btn btn-danger" @onclick=@(() => EliminarDetalle(item))><i class="oi oi-trash" /></button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <div class="row d-flex justify-content-center">
                            <div class="col-md-6">
                                <label>Total:</label>
                                <input disabled @bind-value="TotalPrecio" class="form-control" />
                            </div>
                        </div>
                    </fieldset>
                </div>

                <div class="card-footer d-flex justify-content-center">
                    <div class="btn-group">
                        <button type="button" class="btn btn-outline-primary" @onclick="Limpiar">Nuevo <i class="oi oi-file" /></button>
                        <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document" /></button>
                        <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
                    </div>
                </div>
            </div>
        </div>
    </fieldset>
</EditForm>

@code
{
    [Parameter]
    public int EntradaId { get; set; }
    public Entradas entradas { get; set; } = new Entradas();
    public Productos productos { get; set; } = new Productos();
    public EntradasDetalle entradasDetalle { get; set; } = new EntradasDetalle();
    public int Total { get; set; } = 0;
    public double? TotalPrecio { get; set; } = 0;
    public int Cantidad { get; set; }
    public List<Productos> L_Productos { get; set; } = new List<Productos>();

    protected override async Task OnInitializedAsync()
    {
        var productos = await httpClient.GetFromJsonAsync<List<Productos>>("api/Productos");

        if (productos is not null)
        {
            L_Productos = productos;
        }

        if(EntradaId > 0)
        {
            this.entradas.EntradaId = EntradaId;
            this.Buscar();
        }
    }

    public void Nuevo()
    {
        this.entradas = new Entradas();
        TotalPrecio = 0;
    }

    public void Limpiar()
    {
        this.entradas = new Entradas();
        TotalPrecio = 0;
        notify.ShowNotification(titulo: "Nuevo", mensaje: "Se ha limpiado correctamente", NotificationSeverity.Info);
    }

    public async Task<bool> Buscar()
    {
        try
        {
            var entradaEncontrada = await httpClient.GetFromJsonAsync<Entradas>($"api/Entradas/{entradas.EntradaId}");

            if (entradaEncontrada != null)
            {
                int Suma = 0;
                double? Suma1 = 0;
                this.entradas = entradaEncontrada;
                this.entradas.entradasDetalle = entradaEncontrada.entradasDetalle.ToList();

                foreach (var item in entradas.entradasDetalle)
                {
                    Suma += item.CantidadUtilizada;
                    Suma1 += item.Importe;
                    Total = Suma;
                    TotalPrecio = Suma1;
                }

                StateHasChanged();
                notify.ShowNotification(titulo: "Encontrado", mensaje: "La entrada se ha encontrado con exito",
                NotificationSeverity.Info);
                return true;
            }
            else
            {
                return false;
            }
        }
        catch
        {
            notify.ShowNotification(titulo: "No encontrado", mensaje: "Esa entrada no existe", NotificationSeverity.Warning);
            return false;
        }
    }

    private async Task<Productos> BuscarProductos(int ProductoId)
    {
        var producto = await httpClient.GetFromJsonAsync<Productos>($"api/Productos/{ProductoId}");

        if (producto == null)
        {
            return new Productos();
        }

        return producto;
    }

    public bool Validar()
    {
        if (string.IsNullOrEmpty(entradas.Concepto))
        {
            return false;
        }
        if (entradas.ProductoId < 0)
        {
            return false;
        }
        if (entradas.CantidadProducida < 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public bool ValidarDetalle()
    {
        if (entradasDetalle.ProductoId < 0)
        {
            return false;
        }
        if (entradasDetalle.CantidadUtilizada < 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public async Task Guardar()
    {
        entradas.entradasDetalle = this.entradas.entradasDetalle.ToList();

        if (Validar())
        {
            using var response = await httpClient.PostAsJsonAsync("api/Entradas", entradas);
            await Imprimir();

            if (response.IsSuccessStatusCode)
            {
                var entradaDevuelta = await response.Content.ReadFromJsonAsync<Entradas>();

                if (entradaDevuelta is not null)
                {
                    this.entradas = entradaDevuelta;
                    Nuevo();
                    notify.ShowNotification(titulo: "Guardado", mensaje: "El producto se ha guardado con exito",
                    NotificationSeverity.Success);
                }
                else
                {
                    notify.ShowNotification(titulo: "No Guardado", mensaje: "No hay nada para guardar", NotificationSeverity.Error);
                }
            }
            else
            {
                notify.ShowNotification(titulo: "Error", mensaje: "Ha ocurrido un error, intentelo de nuevo",
                NotificationSeverity.Error);
            }
        }
    }
    
    public async Task Eliminar()
    {
        if (Validar())
        {
            using var response = await httpClient.DeleteAsync($"api/Entradas/{entradas.EntradaId}");

            if (!response.IsSuccessStatusCode)
            {

                notify.ShowNotification(titulo: "No eliminado", mensaje: "No hay nada por eliminar", NotificationSeverity.Warning);
                return;
            }
            else
            {
                Nuevo();
                notify.ShowNotification(titulo: "Eliminado", mensaje: "El producto se ha eliminado correctamente",
                NotificationSeverity.Error);
            }
        }
    }

    public async Task AgregarDetalle()
    {
        try
        {
            if(ValidarDetalle())
            {
                if(entradasDetalle.CantidadUtilizada <= 0)
                {
                    notify.ShowNotification(titulo: "Error", mensaje: "La cantidad a utilizar debe ser mayor a cero", NotificationSeverity.Warning);
                    return;
                }

                var producto = await BuscarProductos(entradasDetalle.ProductoId);

                if(entradas != null)
                {
                    int Suma = 0;
                    double? Suma1 = 0;

                    if(entradasDetalle.CantidadUtilizada > producto.Existencia)
                    {
                        notify.ShowNotification(titulo: "Error", mensaje: "La cantidad utilizada es mayor que la cantidad del producto", NotificationSeverity.Warning);
                        return;
                    }

                    entradasDetalle.EntradaId = entradas.EntradaId;
                    entradasDetalle.Precio = producto.precioVenta;
                    entradas.entradasDetalle.Add(entradasDetalle);
                    entradasDetalle = new EntradasDetalle();
                    notify.ShowNotification(titulo: "Compra Agregada", mensaje: "La compra se ha agregado correctamente", NotificationSeverity.Success);

                    foreach(var item in entradas.entradasDetalle)
                    {
                        Suma += item.CantidadUtilizada;
                        Suma1 += item.Importe;
                        Total = Suma;
                        TotalPrecio = Suma1;
                    }
                }
            }
        }
        catch
        {
            notify.ShowNotification(titulo: "Error", mensaje: "Es necesario agregar un producto antes que una cantidad", NotificationSeverity.Error);
            return;
        }
    }

    public void EliminarDetalle(EntradasDetalle detalle)
    {
        this.entradas.entradasDetalle.Remove(detalle);

        Total = this.entradas.entradasDetalle.Sum(t => t.CantidadUtilizada);
    }

    public string ObtenerDescripcion(int Id)
    {
        return L_Productos.Where(p => p.ProductoId == Id).FirstOrDefault().Descripcion;
    }

    private async Task Imprimir()
    {
        await js.InvokeVoidAsync("print");
    }
}